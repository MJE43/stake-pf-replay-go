diff --git a/frontend/package.json.md5 b/frontend/package.json.md5
index 852b3a0..c579eba 100755
--- a/frontend/package.json.md5
+++ b/frontend/package.json.md5
@@ -1 +1 @@
-b0775e9b59789a5ff57fd544355b76a7
\ No newline at end of file
+2f08ffe634d66d8b4ef16f99a08e37cb
\ No newline at end of file
diff --git a/frontend/src/components/LiveBetsTable.tsx b/frontend/src/components/LiveBetsTable.tsx
index 0863785..4e1740a 100644
--- a/frontend/src/components/LiveBetsTable.tsx
+++ b/frontend/src/components/LiveBetsTable.tsx
@@ -2,6 +2,7 @@ import { forwardRef, memo, useCallback, useEffect, useMemo, useRef, useState } f
 import type { ComponentPropsWithoutRef, KeyboardEvent } from 'react';
 import type { TableComponents, TableVirtuosoHandle } from 'react-virtuoso';
 import { TableVirtuoso } from 'react-virtuoso';
+import { IconSettings } from '@tabler/icons-react';
 import { Badge } from '@/components/ui/badge';
 import { Button } from '@/components/ui/button';
 import { Input } from '@/components/ui/input';
@@ -10,6 +11,7 @@ import { Skeleton } from '@/components/ui/skeleton';
 import { Switch } from '@/components/ui/switch';
 import MultiplierDeltaSummary, { MultiplierOption, TrackedHit } from '@/components/MultiplierDeltaSummary';
 import { useBetsStream } from '@/hooks/useBetsStream';
+import { useStreamPreferences } from '@/hooks/useStreamPreferences';
 import { cn } from '@/lib/utils';
 import type { LiveBet } from '@/types/live';
 
@@ -82,13 +84,9 @@ const difficultyTone: Record<LiveBet['difficulty'], string> = {
   expert: 'border-destructive/40 bg-destructive/10 text-destructive',
 };
 
-const STORAGE_PREFIX = 'live-delta-preferences';
-const DENSITY_STORAGE_PREFIX = 'live-bets-density';
 const MULTIPLIER_PRECISION = 2;
 const MAX_RECENT_HITS = 10;
 
-type RowDensity = 'comfortable' | 'compact';
-
 function normalizeMultiplier(value: number) {
   return Number(value.toFixed(MULTIPLIER_PRECISION));
 }
@@ -111,14 +109,22 @@ const LiveBetsTableComponent = ({ streamId, minMultiplier, apiBase }: LiveBetsTa
   const [isPinnedToTop, setIsPinnedToTop] = useState(true);
   const [minFilterRaw, setMinFilterRaw] = useState(minMultiplier ? String(minMultiplier) : '');
   const [appliedMin, setAppliedMin] = useState(minMultiplier ?? 0);
-
-  const [trackingEnabled, setTrackingEnabled] = useState(false);
-  const [trackedMultipliers, setTrackedMultipliers] = useState<number[]>([]);
-  const [activeMultiplierKey, setActiveMultiplierKey] = useState<string | null>(null);
-  const [trackingHydrated, setTrackingHydrated] = useState(false);
   const [newTrackedInput, setNewTrackedInput] = useState('');
-  const [density, setDensity] = useState<RowDensity>('comfortable');
-  const [densityHydrated, setDensityHydrated] = useState(false);
+  const [showColumnSettings, setShowColumnSettings] = useState(false);
+
+  const {
+    preferences,
+    hydrated,
+    setDensity,
+    setColumns,
+    setTracking,
+    addTrackedMultiplier,
+    removeTrackedMultiplier,
+    setActiveMultiplierKey,
+  } = useStreamPreferences(streamId);
+
+  const { density, columns, tracking } = preferences;
+  const { enabled: trackingEnabled, multipliers: trackedMultipliers, activeKey: activeMultiplierKey } = tracking;
 
   useEffect(() => {
     setMinFilterRaw(minMultiplier ? String(minMultiplier) : '');
@@ -140,63 +146,6 @@ const LiveBetsTableComponent = ({ streamId, minMultiplier, apiBase }: LiveBetsTa
     return () => window.clearTimeout(timeout);
   }, [minFilterRaw]);
 
-  useEffect(() => {
-    if (typeof window === 'undefined') {
-      setTrackingHydrated(true);
-      return;
-    }
-
-    setTrackingHydrated(false);
-
-    const storageKey = `${STORAGE_PREFIX}:${streamId}`;
-    try {
-      const raw = window.localStorage.getItem(storageKey);
-      if (!raw) {
-        setTrackingEnabled(false);
-        setTrackedMultipliers([]);
-        setActiveMultiplierKey(null);
-        setTrackingHydrated(true);
-        return;
-      }
-      const parsed = JSON.parse(raw) as {
-        enabled?: boolean;
-        multipliers?: number[];
-        activeKey?: string | null;
-      } | null;
-      const multipliers = Array.isArray(parsed?.multipliers)
-        ? parsed!.multipliers
-            .map((value) => Number(value))
-            .filter((value) => Number.isFinite(value) && value > 0)
-            .map((value) => normalizeMultiplier(value))
-        : [];
-      setTrackingEnabled(Boolean(parsed?.enabled));
-      setTrackedMultipliers(multipliers);
-      setActiveMultiplierKey(parsed?.activeKey && typeof parsed.activeKey === 'string' ? parsed.activeKey : null);
-    } catch (err) {
-      console.warn('Failed to load multiplier tracking preferences', err);
-      setTrackingEnabled(false);
-      setTrackedMultipliers([]);
-      setActiveMultiplierKey(null);
-    } finally {
-      setTrackingHydrated(true);
-    }
-  }, [streamId]);
-
-  useEffect(() => {
-    if (!trackingHydrated || typeof window === 'undefined') return;
-    const storageKey = `${STORAGE_PREFIX}:${streamId}`;
-    const payload = {
-      enabled: trackingEnabled,
-      multipliers: trackedMultipliers,
-      activeKey: activeMultiplierKey,
-    };
-    try {
-      window.localStorage.setItem(storageKey, JSON.stringify(payload));
-    } catch (err) {
-      console.warn('Failed to persist multiplier tracking preferences', err);
-    }
-  }, [trackingHydrated, streamId, trackingEnabled, trackedMultipliers, activeMultiplierKey]);
-
   useEffect(() => {
     if (!trackedMultipliers.length) {
       setActiveMultiplierKey(null);
@@ -205,35 +154,7 @@ const LiveBetsTableComponent = ({ streamId, minMultiplier, apiBase }: LiveBetsTa
     if (!activeMultiplierKey || !trackedMultipliers.some((value) => multiplierKey(value) === activeMultiplierKey)) {
       setActiveMultiplierKey(multiplierKey(trackedMultipliers[0]));
     }
-  }, [trackedMultipliers, activeMultiplierKey]);
-
-  useEffect(() => {
-    if (typeof window === 'undefined') {
-      setDensityHydrated(true);
-      return;
-    }
-    const storageKey = `${DENSITY_STORAGE_PREFIX}:${streamId}`;
-    try {
-      const raw = window.localStorage.getItem(storageKey);
-      if (raw === 'compact' || raw === 'comfortable') {
-        setDensity(raw);
-      }
-    } catch (err) {
-      console.warn('Failed to load table density preference', err);
-    } finally {
-      setDensityHydrated(true);
-    }
-  }, [streamId]);
-
-  useEffect(() => {
-    if (!densityHydrated || typeof window === 'undefined') return;
-    const storageKey = `${DENSITY_STORAGE_PREFIX}:${streamId}`;
-    try {
-      window.localStorage.setItem(storageKey, density);
-    } catch (err) {
-      console.warn('Failed to persist table density preference', err);
-    }
-  }, [densityHydrated, density, streamId]);
+  }, [trackedMultipliers, activeMultiplierKey, setActiveMultiplierKey]);
 
   const handleAddTrackedMultiplier = useCallback(() => {
     const trimmed = newTrackedInput.trim();
@@ -242,29 +163,17 @@ const LiveBetsTableComponent = ({ streamId, minMultiplier, apiBase }: LiveBetsTa
     if (!Number.isFinite(parsed) || parsed <= 0) {
       return;
     }
-    const normalized = normalizeMultiplier(parsed);
-    const key = multiplierKey(normalized);
-    if (trackedMultipliers.some((value) => multiplierKey(value) === key)) {
-      setNewTrackedInput('');
-      setActiveMultiplierKey((current) => current ?? key);
-      return;
-    }
-    setTrackedMultipliers((prev) => {
-      const next = [...prev, normalized].sort((a, b) => a - b);
-      return next;
-    });
+    addTrackedMultiplier(parsed);
     setNewTrackedInput('');
-    setActiveMultiplierKey((current) => current ?? key);
-  }, [newTrackedInput, trackedMultipliers]);
+  }, [newTrackedInput, addTrackedMultiplier]);
 
   const handleRemoveTrackedMultiplier = useCallback((key: string) => {
-    setTrackedMultipliers((prev) => prev.filter((value) => multiplierKey(value) !== key));
-    setActiveMultiplierKey((current) => (current === key ? null : current));
-  }, []);
+    removeTrackedMultiplier(key);
+  }, [removeTrackedMultiplier]);
 
   const handleSelectMultiplier = useCallback((key: string) => {
     setActiveMultiplierKey(key);
-  }, []);
+  }, [setActiveMultiplierKey]);
 
 const handleTrackedInputKeyDown = useCallback(
   (event: KeyboardEvent<HTMLInputElement>) => {
@@ -300,53 +209,98 @@ const handleTrackedInputKeyDown = useCallback(
         hitsByKey: new Map<string, TrackedHit[]>(),
         hitCounts: new Map<string, number>(),
         trackedKeys: new Set<string>(),
+        warnings: [] as string[],
       };
     }
 
-    const trackedKeys = new Set(trackedMultipliers.map((value) => multiplierKey(value)));
-    const sortedAsc = [...rows].sort((a, b) => a.nonce - b.nonce);
-    const lastNonceByKey = new Map<string, number>();
-    const rowMap = new Map<number, RowDeltaInfo>();
-    const fullHits = new Map<string, TrackedHit[]>();
-    const hitCounts = new Map<string, number>();
-
-    for (const row of sortedAsc) {
-      const normalized = normalizeMultiplier(row.round_result);
-      const key = multiplierKey(normalized);
-      if (!trackedKeys.has(key)) {
-        continue;
+    try {
+      const trackedKeys = new Set(trackedMultipliers.map((value) => multiplierKey(value)));
+      
+      const seenIds = new Set<number>();
+      const dedupedRows = rows.filter((row) => {
+        if (seenIds.has(row.id)) return false;
+        seenIds.add(row.id);
+        return true;
+      });
+
+      const sortedAsc = [...dedupedRows].sort((a, b) => {
+        if (a.nonce !== b.nonce) return a.nonce - b.nonce;
+        return a.id - b.id;
+      });
+
+      const lastNonceByKey = new Map<string, number>();
+      const rowMap = new Map<number, RowDeltaInfo>();
+      const fullHits = new Map<string, TrackedHit[]>();
+      const hitCounts = new Map<string, number>();
+      const warnings: string[] = [];
+
+      for (const row of sortedAsc) {
+        const normalized = normalizeMultiplier(row.round_result);
+        const key = multiplierKey(normalized);
+        if (!trackedKeys.has(key)) {
+          continue;
+        }
+
+        const previousNonce = lastNonceByKey.get(key);
+        let delta: number | null = null;
+
+        if (previousNonce != null) {
+          const rawDelta = row.nonce - previousNonce - 1;
+          if (rawDelta < 0) {
+            warnings.push(`Negative delta detected for ${key}× at nonce ${row.nonce}`);
+            delta = null;
+          } else if (rawDelta > 100000) {
+            warnings.push(`Suspiciously large delta (${rawDelta}) for ${key}× at nonce ${row.nonce}`);
+            delta = rawDelta;
+          } else {
+            delta = rawDelta;
+          }
+        }
+
+        lastNonceByKey.set(key, row.nonce);
+
+        const hit: TrackedHit = {
+          rowId: row.id,
+          nonce: row.nonce,
+          multiplier: normalized,
+          delta,
+          at: row.date_time,
+        };
+
+        const list = fullHits.get(key) ?? [];
+        list.push(hit);
+        fullHits.set(key, list);
+        hitCounts.set(key, (hitCounts.get(key) ?? 0) + 1);
+        rowMap.set(row.id, { key, multiplier: normalized, delta });
       }
-      const previousNonce = lastNonceByKey.get(key);
-      const delta = previousNonce != null ? row.nonce - previousNonce - 1 : null;
-      lastNonceByKey.set(key, row.nonce);
-
-      const hit: TrackedHit = {
-        rowId: row.id,
-        nonce: row.nonce,
-        multiplier: normalized,
-        delta,
-        at: row.date_time,
-      };
 
-      const list = fullHits.get(key) ?? [];
-      list.push(hit);
-      fullHits.set(key, list);
-      hitCounts.set(key, (hitCounts.get(key) ?? 0) + 1);
-      rowMap.set(row.id, { key, multiplier: normalized, delta });
-    }
+      const limitedHits = new Map<string, TrackedHit[]>();
+      fullHits.forEach((list, key) => {
+        const limited = list.slice(-MAX_RECENT_HITS).reverse();
+        limitedHits.set(key, limited);
+      });
 
-    const limitedHits = new Map<string, TrackedHit[]>();
-    fullHits.forEach((list, key) => {
-      const limited = list.slice(-MAX_RECENT_HITS).reverse();
-      limitedHits.set(key, limited);
-    });
+      if (warnings.length > 0) {
+        console.warn('Delta tracking warnings:', warnings);
+      }
 
-    return {
-      rowDeltaMap: rowMap,
-      hitsByKey: limitedHits,
-      hitCounts,
-      trackedKeys,
-    };
+      return {
+        rowDeltaMap: rowMap,
+        hitsByKey: limitedHits,
+        hitCounts,
+        trackedKeys,
+        warnings,
+      };
+    } catch (err) {
+      console.error('Failed to calculate tracking data', err);
+      return {
+        rowDeltaMap: new Map<number, RowDeltaInfo>(),
+        hitsByKey: new Map<string, TrackedHit[]>(),
+        hitCounts: new Map<string, number>(),
+        trackedKeys: new Set<string>(),
+        warnings: ['Failed to calculate deltas'],
+      };
+    }
   }, [trackingEnabled, trackedMultipliers, rows]);
 
   const handleJumpToHit = useCallback(
@@ -416,17 +370,27 @@ const handleTrackedInputKeyDown = useCallback(
   const fixedHeader = useMemo(
     () => (
       <tr className="sticky top-0 z-20 bg-card/95 uppercase tracking-[0.18em] text-muted-foreground backdrop-blur-sm">
-        <th className={cn(headerPadding, headerTextClass, 'text-left font-semibold text-foreground/80')}>Nonce</th>
-        <th className={cn(headerPadding, headerTextClass, 'text-right font-semibold text-foreground/80')}>Result</th>
+        <th className={cn(headerPadding, headerTextClass, 'min-w-[140px] text-left font-semibold text-foreground/80')} style={{ width: '18%' }}>
+          Nonce
+        </th>
+        <th className={cn(headerPadding, headerTextClass, 'min-w-[100px] text-right font-semibold text-foreground/80')} style={{ width: '12%' }}>
+          Result
+        </th>
         {showDeltaColumn && (
-          <th className={cn(headerPadding, headerTextClass, 'text-right font-semibold text-foreground/80')}>Δ Nonce</th>
+          <th className={cn(headerPadding, headerTextClass, 'min-w-[100px] text-right font-semibold text-foreground/80')} style={{ width: '12%' }}>
+            Δ Nonce
+          </th>
         )}
-        <th className={cn(headerPadding, headerTextClass, 'text-right font-semibold text-foreground/80')}>Amount</th>
-        <th className={cn(headerPadding, headerTextClass, 'text-right font-semibold text-foreground/80')}>Payout</th>
-        <th className={cn(headerPadding, headerTextClass, 'hidden xl:table-cell text-left font-semibold text-foreground/80')}>
+        <th className={cn(headerPadding, headerTextClass, 'min-w-[100px] text-right font-semibold text-foreground/80')} style={{ width: '12%' }}>
+          Amount
+        </th>
+        <th className={cn(headerPadding, headerTextClass, 'min-w-[100px] text-right font-semibold text-foreground/80')} style={{ width: '12%' }}>
+          Payout
+        </th>
+        <th className={cn(headerPadding, headerTextClass, 'hidden min-w-[110px] text-left font-semibold text-foreground/80 xl:table-cell')} style={{ width: '14%' }}>
           Difficulty
         </th>
-        <th className={cn(headerPadding, headerTextClass, 'hidden 2xl:table-cell text-right font-semibold text-foreground/80')}>
+        <th className={cn(headerPadding, headerTextClass, 'hidden min-w-[120px] text-right font-semibold text-foreground/80 2xl:table-cell')} style={{ width: '16%' }}>
           Target
         </th>
       </tr>
@@ -511,8 +475,8 @@ const handleTrackedInputKeyDown = useCallback(
           <Switch
             id="track-multipliers-toggle"
             checked={trackingEnabled}
-            onCheckedChange={(checked) => setTrackingEnabled(Boolean(checked))}
-            disabled={!trackingHydrated}
+            onCheckedChange={(checked) => setTracking({ enabled: Boolean(checked) })}
+            disabled={!hydrated}
           />
           <Label htmlFor="track-multipliers-toggle" className="text-xs font-medium text-muted-foreground">
             Track specific multipliers
diff --git a/frontend/src/components/MultiplierDeltaSummary.tsx b/frontend/src/components/MultiplierDeltaSummary.tsx
index fe9c8a3..45be5ec 100644
--- a/frontend/src/components/MultiplierDeltaSummary.tsx
+++ b/frontend/src/components/MultiplierDeltaSummary.tsx
@@ -152,13 +152,26 @@ export default function MultiplierDeltaSummary({
         </div>
 
         {hits.length === 0 ? (
-          <div className="rounded-md border border-dashed border-border/60 bg-card/60 p-3 text-xs text-muted-foreground/80">
-            Waiting for the first hit of {formattedLabel}.
+          <div className="flex flex-col items-center gap-2 rounded-md border border-dashed border-border/60 bg-card/60 p-4 text-center">
+            <div className="rounded-full border border-border/60 bg-muted/40 p-3">
+              <IconTarget size={20} className="text-muted-foreground/60" />
+            </div>
+            <div className="text-xs font-medium text-muted-foreground/80">
+              Waiting for first hit of {formattedLabel}
+            </div>
+            <div className="text-[0.7rem] text-muted-foreground/60">
+              Delta tracking will begin once this multiplier appears in the bet stream
+            </div>
           </div>
         ) : (
           <div className="divide-y divide-border/40 overflow-hidden rounded-md border border-border/60 bg-card/80">
-            {hits.map((hit) => {
-              const deltaDisplay = typeof hit.delta === 'number' ? hit.delta.toLocaleString() : '—';
+            {hits.map((hit, index) => {
+              const isFirstHit = hit.delta === null && index === hits.length - 1;
+              const deltaDisplay = typeof hit.delta === 'number' 
+                ? hit.delta.toLocaleString() 
+                : isFirstHit 
+                  ? 'First' 
+                  : '—';
               return (
                 <button
                   key={hit.rowId}
@@ -171,8 +184,16 @@ export default function MultiplierDeltaSummary({
                       <Badge variant="outline" className="border-[hsl(var(--primary))]/40 text-[hsl(var(--primary))]">
                         Nonce {hit.nonce.toLocaleString()}
                       </Badge>
+                      {isFirstHit && (
+                        <Badge variant="outline" className="border-success-600/40 bg-success-600/10 text-success-600 text-[0.65rem]">
+                          Initial
+                        </Badge>
+                      )}
                     </div>
-                    <div className="text-xs font-medium text-muted-foreground/80">
+                    <div className={cn(
+                      "text-xs font-medium",
+                      isFirstHit ? "text-success-600" : "text-muted-foreground/80"
+                    )}>
                       Δ {deltaDisplay}
                     </div>
                   </div>
